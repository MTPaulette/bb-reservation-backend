// app/Providers/MailConfigServiceProvider.php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Mail;
use App\Models\Option;

class MailConfigServiceProvider extends ServiceProvider
{
    public function boot()
    {
        $this->configureMail();
        $this->listenForOptionChanges();
    }

    protected function configureMail()
    {
        $options = Option::where('key', 'mail_config')->first();

        if ($options) {
            $mailConfig = json_decode($options->value, true);

            config([
                'mail.mailers.smtp.host' => $mailConfig['host'],
                'mail.mailers.smtp.port' => $mailConfig['port'],
                'mail.mailers.smtp.username' => $mailConfig['username'],
                'mail.mailers.smtp.password' => $mailConfig['password'],
                'mail.from.address' => $mailConfig['from_address'],
                'mail.from.name' => $mailConfig['from_name'],
            ]);

            Mail::reconnect();
        }
    }

    protected function listenForOptionChanges()
    {
        Option::updated(function ($option) {
            if ($option->key === 'mail_config') {
                $this->configureMail();
            }
        });
    }
}
=====================================================
Pour invalider le token de l'utilisateur authentifié si sa dernière requête date d'il y a 15 minutes, vous pouvez utiliser une combinaison de Laravel Sanctum et de Laravel API.

Voici les étapes à suivre :

1. Créez un middleware qui vérifie la dernière requête de l'utilisateur :

namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\Auth;

class CheckLastRequest
{
    public function handle($request, Closure $next)
    {
        $user = Auth::user();
        if ($user) {
            $lastRequest = $user->last_request_at;
            if ($lastRequest && $lastRequest->diffInMinutes(now()) > 15) {
                // Invalider le token
                $user->tokens()->delete();
            }
        }
        return $next($request);
    }
}

1. Ajoutez le middleware à votre route API :

Route::middleware([CheckLastRequest::class])->group(function () {
    // Vos routes API ici
});

1. Mettez à jour la dernière requête de l'utilisateur à chaque requête :

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ApiController extends Controller
{
    public function __construct(Request $request)
    {
        $user = Auth::user();
        if ($user) {
            $user->last_request_at = now();
            $user->save();
        }
    }

    // Vos méthodes API ici
}
