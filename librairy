// app/Providers/MailConfigServiceProvider.php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Mail;
use App\Models\Option;

class MailConfigServiceProvider extends ServiceProvider
{
    public function boot()
    {
        $this->configureMail();
        $this->listenForOptionChanges();
    }

    protected function configureMail()
    {
        $options = Option::where('key', 'mail_config')->first();

        if ($options) {
            $mailConfig = json_decode($options->value, true);

            config([
                'mail.mailers.smtp.host' => $mailConfig['host'],
                'mail.mailers.smtp.port' => $mailConfig['port'],
                'mail.mailers.smtp.username' => $mailConfig['username'],
                'mail.mailers.smtp.password' => $mailConfig['password'],
                'mail.from.address' => $mailConfig['from_address'],
                'mail.from.name' => $mailConfig['from_name'],
            ]);

            Mail::reconnect();
        }
    }

    protected function listenForOptionChanges()
    {
        Option::updated(function ($option) {
            if ($option->key === 'mail_config') {
                $this->configureMail();
            }
        });
    }
}
=====================================================

$user = $request->user();
        $user->tokens()->delete();
        return response([
            'message' => 'Logout user',
        ], 201);

======================================

Étape 1 : Créer un job pour vérifier l'inactivité

Créez un nouveau job dans le dossier app/Jobs de votre projet Laravel :

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Auth;

class CheckTokenInactivity implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public function handle()
    {
        // Récupérer la date de la dernière requête API
        $lastRequest = Auth::user()->last_request_at;

        // Vérifie si la dernière requête API a été faite il y a plus de 15 minutes
        if ($lastRequest && (now()->diffInMinutes($lastRequest) > 15)) {
            // Expire le token
            Auth::logout();
        }
    }
}

Étape 2 : Mettre à jour la date de la dernière requête API

Dans votre contrôleur API, mettez à jour la date de la dernière requête API pour chaque requête :

namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class MyController extends Controller
{
    public function __construct()
    {
        // Mettre à jour la date de la dernière requête API
        Auth::user()->last_request_at = now();
        Auth::user()->save();
    }

    public function myMethod(Request $request)
    {
        // Code de votre méthode
    }
}

Étape 3 : Planifier le job

Planifiez le job pour être exécuté toutes les minutes en utilisant la commande schedule:run de Laravel :

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Jobs\CheckTokenInactivity;

class ScheduleCheckTokenInactivity extends Command
{
    protected $signature = 'schedule:check-token-inactivity';

    protected $description = 'Schedule the check token inactivity job';

    public function handle()
    {
        // Planifie le job pour être exécuté toutes les minutes
        CheckTokenInactivity::dispatch()->everyMinute();
    }
}

Étape 4 : Ajouter la commande à la crontab

Ajoutez la commande schedule:run à la crontab de votre serveur pour exécuter la commande toutes les minutes :
